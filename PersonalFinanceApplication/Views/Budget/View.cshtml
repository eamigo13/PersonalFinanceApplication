@model IEnumerable<PersonalFinanceApplication.Models.BudgetCategory>

@{
    ViewBag.Title = "View";

    //Put the Model of characters into a list so we can iterate through it using a for loop
    var list = Model.ToList();

}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>

<br />
<br />

<div class="row">
    <div class = "col-md-6">
        <canvas id="TotalExpendituresPieChart"></canvas>
        <script>

            function getRandomColor() {
                var letters = '0123456789ABCDEF'.split('');
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }

            var labels = @Html.Raw(Json.Encode(ViewBag.categoryNames));//['a', 'b', 'c', 'd', 'e', 'f'];
            var values = @Html.Raw(Json.Encode(ViewBag.usedAmounts));//[2, 3, 4, 5, 4, 3];
            var colors = [];
            for (i = 0; i < 6; i++) {
                colors.push(getRandomColor());
            }

            var ctx = document.getElementById("TotalExpendituresPieChart").getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: colors
                    }]
                }
            });
        </script>
    </div>

    <div class="col-md-6">
        <canvas id="UsedRemainingDoughnutChart"></canvas>
        <script>

            function getRandomColor() {
                var letters = '0123456789ABCDEF'.split('');
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }

            var labels = ["Used", "Remaining"];//['a', 'b', 'c', 'd', 'e', 'f'];
            var values = @Html.Raw(Json.Encode(ViewBag.nameAmountsDictionary["Groceries"]));//[2, 3, 4, 5, 4, 3];
            var colors = [];
            for (i = 0; i < 6; i++) {
                colors.push(getRandomColor());
            }

            var ctx = document.getElementById("UsedRemainingDoughnutChart").getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: colors
                    }]
                }
            });
        </script>
    </div>
</div>

@*@for (int i = 0; i < list.Count; i++)
{
    //Create a new bootstrap row every four rows
    if (i % 3 == 0)
    {
        @:<div class="row">
    }

    <div class="col-md-4">
        <canvas id="myChart-@list[i].CategoryID"></canvas>
        <script>
            var ctx = document.getElementById("myChart-@list[i].CategoryID").getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ["Used", "Remaining"],
                    datasets: [{
                        backgroundColor: [
                            "#e74c3c",
                            "#95a5a6"
                        ],
                        data: [@list[i].UsedAmount, @list[i].RemainingAmount]
                    }]
                }
            });
        </script>
    </div>

    //End the bootstrap row every four rows.
    if ((i + 1) % 3 == 0 || (i + 1) == list.Count)
    {
        @:</div>
    }
}*@





