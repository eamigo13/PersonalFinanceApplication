@model IEnumerable<PersonalFinanceApplication.Models.BudgetCategory>

@{
    ViewBag.Title = "View";

    //Put the Model of characters into a list so we can iterate through it using a for loop
    var list = Model.ToList();

}

<link rel="stylesheet" href="~/Content/Tabs.css">
<link rel="stylesheet" href="~/Content/Modal.css">
<link rel="stylesheet" href="~/Content/FixedNavBar.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>

<script>

    function Update(budgetid, categoryid, amount) {

        var updatedbudgetcategory = {
            "BudgetID": budgetid,
            "CategoryID": categoryid,
            "Amount": amount
        };

        $.ajax({
            type: 'POST', //HTTP POST Method
            url: '/Budget/UpdateCategory', // Controller/View
            data: JSON.stringify(updatedbudgetcategory),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                //alert("Success");
                updateBudgetSummary();
            },
            failure: function (response) {
                alert("Fail");
            },
            error: function (response) {
                alert("Fail");
            }
        });
    }

    function Delete(budgetid, categoryid) {

        var deletedbudgetcategory = {
            "BudgetID": budgetid,
            "CategoryID": categoryid
        };

        $.ajax({
            type: 'POST', //HTTP POST Method
            url: '/Budget/DeleteCategory', // Controller/View
            data: JSON.stringify(deletedbudgetcategory),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                //alert("Success");
                $('#' + categoryid).remove();
                updateBudgetSummary();
            },
            failure: function (response) {
                alert("Fail");
            },
            error: function (response) {
                alert("Fail");
            }
        });
    }

    function DeleteGoal(goalid) {
        var deletedgoal = {
            "GoalID": goalid
        }

        $.ajax({
            type: 'POST', //HTTP POST Method
            url: '/Budget/DeleteGoal', // Controller/View
            data: JSON.stringify(deletedgoal),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                //alert("Success");
                $('#Goal-' + goalid).remove();
                updateBudgetSummary();
            },
            failure: function (response) {
                alert("Fail");
            },
            error: function (response) {
                alert("Fail");
            }
        });
    }

    function updateBudgetSummary() {


        var budgetID = @ViewBag.budget.BudgetID;
        var budget = {
            "BudgetID": budgetID
        }


        $.ajax({
            type: 'POST', //HTTP POST Method
            url: '/Budget/GetBudgetSummary', // Controller/View
            data: JSON.stringify(budget),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (budgetsummary) {
                $('#BudgetSummaryIncome').text(budgetsummary.ExpectedIncome.toString());
                $('#BudgetSummaryExpenditures').text(budgetsummary.Expenditures);
                $('#BudgetSummaryGoals').text(budgetsummary.Goals);
                $('#BudgetSummaryRemaining').text(budgetsummary.Remaining);

            },
            failure: function (response) {
                alert("Fail");
            },
            error: function (response) {
                alert("Fail");
            }
        });
    }


    $(document).ready(function () {

        updateBudgetSummary();

        $('#AddCategoryRow').hide();

        $("#AddCategoryBtn").click(function () {
            $('#AddCategoryRow').show();
        });

        $("#AddNewCategoryBtn").click(function () {
            var newbudgetcategory = {
                "BudgetID": @ViewBag.budget.BudgetID,
                "CategoryID": $('#NewCategoryID').val(),
                "Amount": $('#NewCategoryAmount').val()
            }

            AddCategory(newbudgetcategory);
        });

        $("#CancelNewCategoryBtn").click(function () {
            $('#AddCategoryRow').hide();
        });

        function AddCategory(budgetcategory) {
            $.ajax({
                type: 'POST', //HTTP POST Method
                url: '/Budget/AddCategory', // Controller/View
                data: JSON.stringify(budgetcategory),
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    //alert("Success");
                    var newrow = "<div id=\"" + budgetcategory.CategoryID + "\"><div class=\"row\"><div class=\"col-md-2\"><p>" + response + "</p></div><div class=\"col-md-2\"><input id=\"Amount-" + budgetcategory.CategoryID + "\" type=\"number\" class=\"form-control\" value=\"" + budgetcategory.Amount + "\" placeholder=\"Amount\" /></div><div class=\"col-md-1\"><button onclick=\"Update(" + budgetcategory.BudgetID + "," + budgetcategory.CategoryID + ", $(\'#Amount-\'+" + budgetcategory.CategoryID + ").val())\" class=\"btn btn-success\">Update</button></div><div class=\"col-md-1\"><button onclick=\"Delete(" + budgetcategory.BudgetID + "," + budgetcategory.CategoryID + ")\" class=\"btn btn-danger\">Remove</button></div></div><hr /></div>";
                    $('#Categories').append(newrow);
                    $('#AddCategoryRow').hide();
                    $('#NewCategoryAmount').val('');
                    updateBudgetSummary();
                },
                failure: function (response) {
                    alert("Fail");
                },
                error: function (response) {
                    alert("Fail");
                }
            });
        }

        function AddGoal(goal) {
            $.ajax({
                type: 'POST', //HTTP POST Method
                url: '/Budget/AddGoal', // Controller/View
                data: JSON.stringify(goal),
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    //alert("Success");
                    var newrow = "<div id=\"Goal-" + response + "\"><div class=\"row\"><div class=\"col-md-6\"><strong>" + goal.GoalName + "</strong><p>" + goal.Description + "</p></div><div class=\"col-md-2\">" + goal.GoalAmount + "</div><div class=\"col-md-2\"><button onclick=\"\" class=\"btn btn-success\">Update</button></div><div class=\"col-md-2\"><button onclick=\"DeleteGoal(" + response + ")\" class=\"btn btn-danger\">Remove</button></div></div><hr /></div>";
                    $('#Goals').append(newrow);
                    addgoalmodal.style.display = "none";
                    updateBudgetSummary();
                },
                failure: function (response) {
                    alert("Fail");
                },
                error: function (response) {
                    alert("Fail");
                }
            });
        }

        // Get the modal
        var addgoalmodal = document.getElementById('AddGoalModal');

        // Get the <span> element that closes the modal
        var vspan = document.getElementsByClassName("close")[0];


        // When the user clicks on <span> (x), close the modal
        $(".close").click(function () {
            addgoalmodal.style.display = "none";
        });

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == vendormodal) {
                addgoalmodal.style.display = "none";
            }
        }

        //When add goal button is clicked, open the add goal modal
        $('#AddGoalBtn').click(function () {
            //Show the modal
            addgoalmodal.style.display = "block";
        });

        $('#AddGoal').click(function () {

            var newgoalname = $('#GoalNameInput').val();
            var newgoaldescription = $('#GoalDescriptionInput').val();
            var newgoalbegamount = $('#GoalBegAmountInput').val();
            var newgoalendamount = $('#GoalEndAmountInput').val();
            var newgoalgoalamount = newgoalendamount - newgoalbegamount;
            var newgoalbudgetid = @ViewBag.budget.BudgetID;

            var newgoal = {
                "GoalName": newgoalname,
                "BudgetID": newgoalbudgetid,
                "Description": newgoaldescription,
                "BeginningAmount": newgoalbegamount,
                "EndAmount": newgoalendamount,
                "GoalAmount": newgoalgoalamount,
                "CurrentAmount": newgoalbegamount
            }

            AddGoal(newgoal);
        });
    })
</script>

<script>

    function openTab(evt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    function UpdateGoal(goalid, currentamount, endamount) {
        var goal = {
            "GoalID": goalid,
            "CurrentAmount": currentamount,
            "EndAmount": endamount
        };

        $.ajax({
            type: 'POST', //HTTP POST Method
            url: '/Budget/UpdateGoal', // Controller/View
            data: JSON.stringify(goal),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                //updateBudgetSummary();
                var canvasid = "Goal-" + goalid;
                var savedamount = response.CurrentAmount - response.BeginningAmount;
                var remainingamount = response.EndAmount - response.CurrentAmount;
                var values = [savedamount, remainingamount];
                $('#Goal-' + goalid).remove();
                $('#GoalChartDiv-' + goalid).append("<canvas id=\"Goal-" + goalid + "\"></canvas>");
                createGoalChart(canvasid, values);

            },
            failure: function (response) {
                alert("Fail");
            },
            error: function (response) {
                alert("Fail");
            }
        });
    }

    //This function generates a random hex color and is used to randomly color different slices of the pie chart
    function getRandomColor() {
        var letters = '0123456789ABCDEF'.split('');
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    //cname = Category Name
    function createDonutChart(cname)
    {
        //Delete the previous donut canvas and append a new canvas to the same div
        $('#donutcanvas').remove();
        $('#donutdiv').append('<canvas id="donutcanvas"></canvas>');
        $('#donuttitle').text('Remaining Budget: ' + cname);

        //Convert the nameAmountsDictionary in the viewbag to a json object
        var nameAmountsDictionary = @Html.Raw(Json.Encode(ViewBag.nameAmountsDictionary));

        //Create the labels for the donut chart
        var donutlabels = ["Used", "Remaining"];

        //Get the values for the donut chart from the dictionary
        var donutvalues = nameAmountsDictionary[cname];

        //Colors for the donut chart
        var donutcolors = ["#9d9fa0", "#37a848"]; //gray for unused and green for used

        //create the elements necessary to create a donut chart on on the 'donutcanvas' div
        var donutcanvas = document.getElementById("donutcanvas");
        var donutctx = donutcanvas.getContext('2d');
        var myChart = new Chart(donutctx, {
            type: 'doughnut',
            data: {
                labels: donutlabels,
                datasets: [{
                    data: donutvalues,
                    backgroundColor: donutcolors
                }]
            }
        });
    }

    function createGoalChart(canvasid, values)
    {
        //Create the labels for the donut chart
        var goallabels = ["Saved", "Remaining"];

        //Get the values for the donut chart from the dictionary
        var goalvalues = values;

        //Colors for the donut chart
        var goalcolors = ["#37a848", "#9d9fa0"]; //gray for unused and green for used

        //create the elements necessary to create a donut chart on on the 'donutcanvas' div
        var goalcanvas = document.getElementById(canvasid);
        var goalctx = goalcanvas.getContext('2d');

        var myChart = new Chart(goalctx, {
            type: 'doughnut',
            data: {
                labels: goallabels,
                datasets: [{
                    data: goalvalues,
                    backgroundColor: goalcolors
                }]
            }
        });
    }

    function showRelatedTransactions(cname)
    {
        var transactionsdiv = document.getElementById("transactionsdiv");
        transactionsdiv.innerHTML = '';

        var categoryTransactionDictionary = @Html.Raw(Json.Encode(ViewBag.categoryTransactionDictionary));


        var transactions = categoryTransactionDictionary[cname];

        for (i = 0; i < transactions.length; i++) {
            var html = "<hr /> <div class=\"row\"><div class=\"col-md-2\"><p>" + transactions[i].DateString + "</p></div><div class=\"col-md-4\"><p>" + transactions[i].Description + "</p></div><div class=\"col-md-2\"><p>" + transactions[i].Amount + "</p></div><div class=\"col-md-2\"><p>" + transactions[i].CategoryName + "</p></div></div>";
            $('#transactionsdiv').append(html);
        }
    }

    function showAll() {
        showRelatedTransactions("All");
        createDonutChart("All");
    }

    $(document).ready(function () {

        // Get the element with id="defaultOpen" and click on it
        document.getElementById("defaultOpen").click();

        //Add all transactions when the page initially opens as well as the alltransaction donut chart
        showRelatedTransactions("All");
        createDonutChart("All");

        //This converts all the category names passed from the server into a json object
        var labels = @Html.Raw(Json.Encode(ViewBag.categoryNames));

        //Convert all the 'used amounts' passed from the server into a json object
        var values = @Html.Raw(Json.Encode(ViewBag.usedAmounts));

        //Create an array of random colors the same size as the number of categories in the budget
        var colors = [];
        for (i = 0; i < 6; i++) {
            colors.push(getRandomColor());
        }

        //Add the values, labels, and colors into a data object to be used by the piechart
        var data = {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: colors
            }]
        };

        //create the elements necessary to create a pie chart on on the 'piecanvas' div
        var canvas = document.getElementById("piecanvas");
        var ctx = canvas.getContext("2d");
        var myNewChart = new Chart(ctx, {
            type: 'pie',
            data: data,
        });

        /*When a pie slice is clicked, pass the name of the category to the create donut chart
        function in order to create a donut chart of the used and remaining amounts for that category */
        canvas.onclick = function (evt) {
            var activePoints = myNewChart.getElementsAtEvent(evt);
            if (activePoints[0]) {
                var chartData = activePoints[0]['_chart'].config.data;
                var idx = activePoints[0]['_index'];

                var label = chartData.labels[idx];
                //var value = chartData.datasets[0].data[idx];
                //alert(url);
                createDonutChart(label);
                showRelatedTransactions(label);
            }
        };

        //Convert the goals array in the viewbag to a json object
        var goals = @Html.Raw(Json.Encode(ViewBag.Goals));

        for (i = 0; i < goals.length; i++) {

            var savedamount = goals[i].CurrentAmount - goals[i].BeginningAmount;
            var remainingamount = goals[i].GoalAmount - savedamount;
            var values = [savedamount, remainingamount];
            //alert(goals[i].CurrentAmount);
            var canvasid = "Goal-" + goals[i].GoalID;
            createGoalChart(canvasid, values);
        }
    })

    $('#Parent').scroll(function () {
        $('#budgetsummary').css('top', $(this).scrollTop());
    });

</script>
<br />



<div class="row">
    <div class="col-md-8">
        <h2>@ViewBag.budget.BudgetName</h2>
        <strong>From @ViewBag.budget.BeginDate to @ViewBag.budget.EndDate</strong>
        <p>@ViewBag.budget.Description</p>
    </div>
</div>

<div id="AddGoalModal" class="modal">

    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Add a New Goal</h3>
        <input type="text" id="GoalNameInput" placeholder="Goal Name" /><br /><br />
        <textarea id="GoalDescriptionInput" rows="4" placeholder="Goal Description"></textarea><br /><br />
        <input type="number" id="GoalBegAmountInput" placeholder="Beginning Amount" /><br /><br />
        <input type="number" id="GoalEndAmountInput" placeholder="End Amount" /><br /><br />

        <input type="button" value="Add" id="AddGoal" />

    </div>

</div>

<div class="buttonsummary bottomnavbar">
    <p><strong>Expected Income: </strong><text id="BudgetSummaryIncome">20,000</text></p>
    <p><strong>Budgeted Expenditures: </strong><text id="BudgetSummaryExpenditures"></text></p>
    <p><strong>Goals: </strong><text id="BudgetSummaryGoals"></text></p>
    <p><strong>Remaining: </strong><text id="BudgetSummaryRemaining"></text></p>
</div>

<br />

<div class="tab">
    <button class="tablinks" id="defaultOpen" onclick="openTab(event, 'Expenditures')">Expenditures</button>
    <button class="tablinks" onclick="openTab(event, 'Income')">Income</button>
    <button class="tablinks" onclick="openTab(event, 'Categories')">Budget</button>
    <button class="tablinks" onclick="openTab(event, 'Goals')">Goals</button>
</div>

<div class="tabcontent" id="Income">
    <h4>Hourly Incomes</h4>
    <hr />
    <div class="row">
        <div class="col-md-2">
            <strong>Description</strong>
        </div>
        <div class="col-md-2">
            <strong>Wage</strong>
        </div>
        <div class="col-md-2">
            <strong>Hours Per Week</strong>
        </div>
        <div class="col-md-1">
            <strong>Type</strong>
        </div>
    </div>
    <hr/>

    @foreach(var item in ViewBag.HourlyIncomes)
    {
        <div class="row">
            <div class="col-md-2">
                @item.IncomeName
            </div>
            <div class="col-md-2">
                <input type="number" id="Wage-@item.IncomeID" value="@item.Wage" placeholder="@item.Wage" class="form-control"/>
            </div>
            <div class="col-md-2">
                <input type="number" id="Hours-@item.IncomeID" value="@item.HoursPerWeek" placeholder="@item.HoursPerWeek" class="form-control" />
            </div>
            <div class="col-md-1">
                @item.IncomeType.Description
            </div>
            <div class="col-md-1">
                <button class="btn btn-success">Update</button>
            </div>
            <div class="col-md-1">
                <button class="btn btn-danger">Delete</button>
            </div>
        </div>
        <hr />
    }

    @foreach (var item in ViewBag.SalaryIncomes)
    {
        <div class="row">
            <div class="col-md-2">
                @item.IncomeName
            </div>
            <div class="col-md-2">
                <input type="number" id="Wage-@item.IncomeID" value="@item.Wage" placeholder="@item.Wage" class="form-control" />
            </div>
            <div class="col-md-2">
            </div>
            <div class="col-md-1">
                @item.IncomeType.Description
            </div>
            <div class="col-md-1">
                <button class="btn btn-success">Update</button>
            </div>
            <div class="col-md-1">
                <button class="btn btn-danger">Delete</button>
            </div>
        </div>
        <hr />
    }
</div>

<div class="tabcontent" id="Categories">
    <br />
    <div class="row">
        <div class="col-md-2">
            <strong>Category</strong>
        </div>
        <div class="col-md-2">
            <strong>Amount</strong>
        </div>
        <div class="col-md-2">
            <button id="AddCategoryBtn" class="btn btn-success">Add Category</button>
        </div>
    </div>
    <hr />

    <div id="AddCategoryRow">
        <div class="row">
            <div class="col-md-2">
                @Html.DropDownList("CategoryID", new SelectList(ViewBag.Categories, "CategoryID", "CategoryName"), new { @class = "form-control", @id = "NewCategoryID" })
            </div>
            <div class="col-md-2">
                <input id="NewCategoryAmount" type="number" class="form-control" placeholder="Amount" />
            </div>
            <div class="col-md-2">
                <button id="AddNewCategoryBtn" class="btn btn-success">Add</button>
                <button id="CancelNewCategoryBtn" class="btn btn-danger">Cancel</button>
            </div>
        </div>
        <hr />
    </div>

    @foreach (var item in Model)
    {

        <div id="@item.CategoryID">
            <div class="row">
                <div class="col-md-2">
                    <p>@item.Category.CategoryName</p>
                </div>
                <div class="col-md-2">
                    <input id="Amount-@item.CategoryID" type="number" class="form-control" value="@item.Amount" placeholder="Amount" />
                </div>
                <div class="col-md-1">
                    <button onclick="Update(@item.BudgetID, @item.CategoryID, $('#Amount-'+@item.CategoryID).val())" class="btn btn-success">Update</button>
                </div>
                <div class="col-md-1">
                    <button onclick="Delete(@item.BudgetID, @item.CategoryID)" class="btn btn-danger">Remove</button>
                </div>
            </div>
            <hr />
        </div>

    }
</div>

<div class="tabcontent" id="Expenditures">
    <div class="row">
        <div class="col-md-6">
            <h3 style="text-align: center">Expenditures by Category</h3>
            <canvas id="piecanvas"></canvas>
        </div>
        <div id="donutdiv" class="col-md-6">
            <h3 id="donuttitle" style="text-align: center"></h3>
            <canvas id="donutcanvas"></canvas>
        </div>
    </div>

    <hr />
    <div class="row">
        <div class="col-md-2">
            <strong>Date</strong>
        </div>
        <div class="col-md-4">
            <strong>Description</strong>
        </div>
        <div class="col-md-2">
            <strong>Amount</strong>
        </div>
        <div class="col-md-2">
            <strong>Category</strong>
        </div>
        <div class="col-md-2">
            <button class="btn btn-success" onclick="showAll()">Show All Categories</button>
        </div>
    </div>

    <div id="transactionsdiv">
    </div>
</div>


<div class="tabcontent" id="Goals">

    <button id="AddGoalBtn" class="btn btn-success">Add Goal</button>

    @for (int i = 0; i < ViewBag.Goals.Length; i++)
    {
        //Create a new bootstrap row every four rows
        if (i % 3 == 0)
        {
            @:<div class="row">
    }

        <div class="col-md-4" style="text-align: center">
            <h3>@ViewBag.Goals[i].GoalName</h3>
            <div id="GoalChartDiv-@ViewBag.Goals[i].GoalID"><canvas id="Goal-@ViewBag.Goals[i].GoalID"></canvas></div>
            <br />
            <p>@ViewBag.Goals[i].Description</p>
            <br />
            <div class="row">
                <div class="col-md-6">
                    <strong>Current Amount: </strong>
                </div>
                <div class="col-md-6">
                    <input type="number" class="form-control" id="UpdateCurrentAmount-@ViewBag.Goals[i].GoalID" value="@ViewBag.Goals[i].CurrentAmount" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <strong>End Amount: </strong>
                </div>
                <div class="col-md-6">
                    <input type="number" class="form-control" id="UpdateEndAmount-@ViewBag.Goals[i].GoalID" value="@ViewBag.Goals[i].EndAmount" />
                </div>
            </div>
            <br />
            <br />
            <button onclick="UpdateGoal(@ViewBag.Goals[i].GoalID, $('#UpdateCurrentAmount-@ViewBag.Goals[i].GoalID').val(), $('#UpdateEndAmount-@ViewBag.Goals[i].GoalID').val())" class="btn btn-success">Update</button>
            <br />
        </div>

        //End the bootstrap row every four rows.
        if ((i + 1) % 3 == 0 || (i + 1) == list.Count)
        {
            @:</div>
        }
    }
</div>













